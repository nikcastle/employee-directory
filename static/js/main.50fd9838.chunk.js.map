{"version":3,"sources":["components/DataBody.js","components/DataTable.js","components/SearchForm.js","components/Navbar.js","utils/API.js","components/DataArea.js","utils/DataAreaContext.js","components/Main.js","components/Wrapper.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["DataBody","props","undefined","developerState","filteredUsers","name","map","login","picture","phone","email","dob","key","uuid","data-th","className","src","large","alt","first","last","href","target","date","dateArray","split","year","join","formatDate","DataTable","id","headings","width","style","onClick","handleSort","SearchName","type","placeholder","aria-label","onChange","e","handleSearchChange","Nav","axios","get","DataArea","React","createContext","useState","users","order","setDeveloperState","useEffect","API","then","results","data","event","filter","value","filteredList","item","toLowerCase","includes","length","heading","currentOrder","elem","toString","sortedUsers","sort","a","b","localeCompare","age","updatedHeadings","Main","Wrapper","children","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iXAsDeA,EAnDE,SAACC,GAahB,OACE,oCAE6CC,IAA1CD,EAAME,eAAeC,cAAc,SAAmEF,IAA/CD,EAAME,eAAeC,cAAc,GAAGC,KAC5FJ,EAAME,eAAeC,cAAcE,KAAI,YAAkD,IAA/CC,EAA8C,EAA9CA,MAAOF,EAAuC,EAAvCA,KAAMG,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC5E,OACE,wBAAIC,IAAKL,EAAMM,MACb,wBAAIC,UAAQ,QAAQC,UAAU,gBAC5B,yBACEC,IAAKR,EAAQS,MACbC,IAAG,kBAAab,EAAKc,MAAlB,YAA2Bd,EAAKe,MACnCL,UAAU,oBAGd,wBAAID,UAAQ,OAAOC,UAAU,0BAC1BV,EAAKc,MADR,IACgBd,EAAKe,MAErB,wBAAIN,UAAQ,QAAQC,UAAU,gBAC3BN,GAEH,wBAAIK,UAAQ,QAAQC,UAAU,gBAC5B,uBAAGM,KAAM,UAAYX,EAAOY,OAAO,WAChCZ,IAGL,wBAAII,UAAQ,MAAMC,UAAU,gBAnCxC,SAAoBQ,GAClB,IAAMC,EAAYD,EAAKE,MAAM,KACvBC,EAAOF,EAAU,GAKvB,MADsB,CAHRA,EAAU,GACPA,EAAU,GAAGC,MAAM,KACf,GACcC,GAAMC,KAAK,KA8BjCC,CAAWjB,EAAIY,WAMxB,uCCNOM,G,MArCG,SAAC5B,GAGjB,OAEE,yBAAKc,UAAU,kBACb,2BACEe,GAAG,QACHf,UAAU,mDAEV,+BACE,4BACGd,EAAME,eAAe4B,SAASzB,KAAI,YAAsB,IAAnBD,EAAkB,EAAlBA,KAAM2B,EAAY,EAAZA,MAC1C,OACE,wBACEjB,UAAU,MACVH,IAAKP,EACL4B,MAAO,CAAED,SACTE,QAAS,WAEPjC,EAAMkC,WAAW9B,KAGlBA,EACD,0BAAMU,UAAU,kBAO1B,kBAAC,EAAD,CAAUZ,eAAgBF,EAAME,qBCZzBiC,EArBI,SAACnC,GAElB,OACE,yBAAKc,UAAU,aACb,yBAAKA,UAAU,eACX,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,mBAAmBe,GAAG,IAAtC,WAIF,2BACAf,UAAU,uBACVsB,KAAK,SACLC,YAAY,eACZC,aAAW,SACXC,SAAU,SAAAC,GAAC,OAAIxC,EAAMyC,mBAAmBD,S,MCLnCE,MATf,SAAa1C,GACX,OACE,yBAAKc,UAAU,UACX,yBAAKA,UAAU,qBACb,kBAAC,EAAD,CAAY2B,mBAAoBzC,EAAMyC,wB,iBCNjC,EAEH,WAER,OAAOE,IAAMC,IAAI,kDC4GNC,G,MChHSC,IAAMC,cAAc,IDK3B,WAAO,IAAD,EACuBC,mBAAS,CACnDC,MAAO,GACPC,MAAO,UACP/C,cAAe,GACf2B,SAAU,CACR,CAAE1B,KAAM,QAAS2B,MAAO,MAAOmB,MAAO,WACtC,CAAE9C,KAAM,OAAQ2B,MAAO,MAAOmB,MAAO,WACrC,CAAE9C,KAAM,QAAS2B,MAAO,MAAOmB,MAAO,WACtC,CAAE9C,KAAM,QAAS2B,MAAO,MAAOmB,MAAO,WACtC,CAAE9C,KAAM,MAAO2B,MAAO,MAAOmB,MAAO,cAVnB,mBACdhD,EADc,KACEiD,EADF,KAiGrB,OAXAC,qBAAU,WACRC,IAAeC,MAAK,SAAAC,GAElBJ,EAAkB,2BACbjD,GADY,IAEf+C,MAAOM,EAAQC,KAAKD,QACpBpD,cAAeoD,EAAQC,KAAKD,gBAG/B,IAGD,oCACE,kBAAC,EAAD,CAAKd,mBAzBkB,SAAAgB,GACzB,IAAMC,EAASD,EAAMpC,OAAOsC,MACtBC,EAAe1D,EAAe+C,MAAMS,QAAO,SAAAG,GAG/C,OAFaA,EAAKzD,KAAKc,MAAM4C,cAAgB,IAAMD,EAAKzD,KAAKe,KAAK2C,eAEpDC,SAASL,EAAOI,kBAGhCX,EAAkB,2BAAKjD,GAAN,IAAsBC,cAAeyD,QAkBpD,yBAAK9C,UAAU,aACZZ,EAAeC,cAAc6D,OAAS,EAAI,kBAAC,EAAD,CAAW9D,eAAkBA,EAAgBgC,WAvF3E,SAAA+B,GACjB,IAAIC,EAAehE,EAAe4B,SAC/B4B,QAAO,SAAAS,GAAI,OAAIA,EAAK/D,OAAS6D,KAC7B5D,KAAI,SAAA8D,GAAI,OAAIA,EAAKjB,SACjBkB,WAGDF,EADmB,YAAjBA,EACa,SAEA,UAGjB,IAkCMG,EAAcnE,EAAeC,cAAcmE,MAlC7B,SAACC,EAAGC,GACtB,MAAqB,WAAjBN,OAEiBjE,IAAfsE,EAAEN,GACG,OACiBhE,IAAfuE,EAAEP,IACH,EAGW,SAAZA,EACAM,EAAEN,GAAS/C,MAAMuD,cAAcD,EAAEP,GAAS/C,OAC5B,QAAZ+C,EACFM,EAAEN,GAASS,IAAMF,EAAEP,GAASS,IAE5BH,EAAEN,GAASQ,cAAcD,EAAEP,SAIjBhE,IAAfsE,EAAEN,GACG,OACiBhE,IAAfuE,EAAEP,IACH,EAGW,SAAZA,EACAO,EAAEP,GAAS/C,MAAMuD,cAAcF,EAAEN,GAAS/C,OAC7B,QAAZ+C,EACDO,EAAEP,GAASS,IAAMH,EAAEN,GAASS,IAE5BF,EAAEP,GAASQ,cAAcF,EAAEN,OAMlCU,EAAkBzE,EAAe4B,SAASzB,KAAI,SAAA8D,GAElD,OADAA,EAAKjB,MAAQiB,EAAK/D,OAAS6D,EAAUC,EAAeC,EAAKjB,MAClDiB,KAGThB,EAAkB,2BACbjD,GADY,IAEfC,cAAekE,EACfvC,SAAU6C,QAgC4G,kCEhG7GC,MARf,WACI,OACE,oCACE,kBAAC,EAAD,Q,MCIOC,MARf,YAAgC,IAAbC,EAAY,EAAZA,SACjB,OACI,yBAAKhE,UAAU,WACXgE,I,MCMKC,MATf,WACI,OACE,yBAAKjE,UAAU,UACb,kDACA,0G,MCWOkE,MAXf,WACE,OACE,yBAAKlE,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYmE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.50fd9838.chunk.js","sourcesContent":["import React from \"react\"\n\n\nconst DataBody = (props) => {\n  \n\n  function formatDate(date) { //* is date coming from the API?\n    const dateArray = date.split(\"-\");\n    const year = dateArray[0];\n    const month = dateArray[1];\n    const dayArray = dateArray[2].split(\"T\");\n    const day = dayArray[0];\n    const formattedDate = [month, day, year].join(\"-\");\n    return formattedDate;\n  }\n\n  return (\n    <tbody>\n      {/* is there a better way to write this?  */}\n      {props.developerState.filteredUsers[0] !== undefined && props.developerState.filteredUsers[0].name !== undefined ? (\n        props.developerState.filteredUsers.map(({ login, name, picture, phone, email, dob }) => {\n          return (\n            <tr key={login.uuid}>\n              <td data-th=\"Image\" className=\"align-middle\">\n                <img\n                  src={picture.large}\n                  alt={`Face of ${name.first} ${name.last}`}\n                  className=\"img-responsive\"\n                />\n              </td>\n              <td data-th=\"Name\" className=\"name-cell align-middle\">\n                {name.first} {name.last}\n              </td>\n              <td data-th=\"Phone\" className=\"align-middle\">\n                {phone}\n              </td>\n              <td data-th=\"Email\" className=\"align-middle\">\n                <a href={\"mailto:\" + email} target=\"__blank\">\n                  {email}\n                </a>\n              </td>\n              <td data-th=\"DOB\" className=\"align-middle\">\n                {formatDate(dob.date)}\n              </td>\n            </tr>\n          );\n        })\n      ) : (\n        <></>\n      )}\n    </tbody>\n  );\n}\n\nexport default DataBody;","import React from \"react\";\nimport DataBody from \"./DataBody\";\nimport \"../styles/DataTable.css\";\n\n\nconst DataTable = (props) => {\n  \n\n  return (\n\n    <div className=\"datatable mt-5\">\n      <table\n        id=\"table\"\n        className=\"table table-striped table-hover table-condensed\"\n      >\n        <thead>\n          <tr>\n            {props.developerState.headings.map(({ name, width }) => {\n              return (\n                <th\n                  className=\"col\"\n                  key={name}\n                  style={{ width }} \n                  onClick={() => {\n                    // props.handleSort(name.toLowerCase());\n                    props.handleSort(name);\n                  }}\n                >\n                  {name}\n                  <span className=\"pointer\"></span>\n                </th>\n              );\n            })}\n          </tr>\n        </thead>\n\n        <DataBody developerState={props.developerState}/>\n      </table>\n    </div>\n  );\n}\n\nexport default DataTable;","import React from \"react\";\n// import DataAreaContext from \"../utils/DataAreaContext\";\n\nconst SearchName = (props) => {\n\n  return (\n    <div className=\"searchbox\">\n      <div className=\"input-group\">\n          <div className=\"input-group-prepend\">\n            <span className=\"input-group-text\" id=\"\">\n              Search\n            </span>\n          </div>\n          <input\n          className=\"form-control mr-sm-2\"\n          type=\"search\"\n          placeholder=\"Enter a Name\"\n          aria-label=\"Search\"\n          onChange={e => props.handleSearchChange(e)}\n        />\n        </div>\n    </div>\n  );\n}\nexport default SearchName;","import React from \"react\";\nimport SearchName from \"./SearchForm.js\";\nimport \"../styles/Navbar.css\";\n\nfunction Nav(props) {\n  return (\n    <nav className=\"navbar\">\n        <div className=\"search-area col-4\">\n          <SearchName handleSearchChange={props.handleSearchChange}/>\n        </div>\n    </nav>\n  );\n}\nexport default Nav;","import axios from \"axios\";\n\nexport default {\n  // Gets all users\n  getUsers: function() {\n\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n  }\n};","import React, { useState, useEffect } from \"react\";\nimport DataTable from \"./DataTable\";\nimport Nav from \"./Navbar\";\nimport API from \"../utils/API\";\nimport \"../styles/DataArea.css\";\nimport DataAreaContext from \"../utils/DataAreaContext\";\n\nconst DataArea = () => {\n  const [developerState, setDeveloperState] = useState({\n    users: [],\n    order: \"descend\",\n    filteredUsers: [],\n    headings: [\n      { name: \"Image\", width: \"10%\", order: \"descend\" },\n      { name: \"name\", width: \"10%\", order: \"descend\" },\n      { name: \"phone\", width: \"20%\", order: \"descend\" },\n      { name: \"email\", width: \"20%\", order: \"descend\" },\n      { name: \"dob\", width: \"10%\", order: \"descend\" }\n    ]\n  });\n\n  const handleSort = heading => {\n    let currentOrder = developerState.headings\n      .filter(elem => elem.name === heading)\n      .map(elem => elem.order)\n      .toString();\n\n    if (currentOrder === \"descend\") {\n      currentOrder = \"ascend\";\n    } else {\n      currentOrder = \"descend\";\n    }\n\n    const sortHeading = (a, b) => {\n      if (currentOrder === \"ascend\") {\n        // account for missing values\n        if (a[heading] === undefined) {\n          return 1; \n        } else if (b[heading] === undefined) {\n          return -1;\n        }\n        // numerically\n        else if (heading === \"name\") {\n          return a[heading].first.localeCompare(b[heading].first);\n        } else if (heading === \"dob\") {\n          return a[heading].age - b[heading].age;\n        } else {\n          return a[heading].localeCompare(b[heading]); \n        }\n      } else {\n        // account for missing values\n        if (a[heading] === undefined) {\n          return 1;\n        } else if (b[heading] === undefined) {\n          return -1;\n        }\n        // numerically\n        else if (heading === \"name\") {\n          return b[heading].first.localeCompare(a[heading].first);\n        }else if (heading === \"dob\") {\n          return b[heading].age - a[heading].age;\n        }  else {\n          return b[heading].localeCompare(a[heading]); \n        }\n      }\n    };\n    \n    const sortedUsers = developerState.filteredUsers.sort(sortHeading);\n    const updatedHeadings = developerState.headings.map(elem => {\n      elem.order = elem.name === heading ? currentOrder : elem.order;\n      return elem;\n    });\n\n    setDeveloperState({\n      ...developerState,\n      filteredUsers: sortedUsers,\n      headings: updatedHeadings\n    });\n  };\n\n  \n  const handleSearchChange = event => {\n    const filter = event.target.value;\n    const filteredList = developerState.users.filter(item => {\n      let values = item.name.first.toLowerCase() + \" \" + item.name.last.toLowerCase();\n      \n      return values.includes(filter.toLowerCase())\n    });\n\n    setDeveloperState({ ...developerState, filteredUsers: filteredList });\n  };\n\n  ///https://stackoverflow.com/questions/53120972/how-to-call-loading-function-with-react-useeffect-only-once\n  useEffect(() => {\n    API.getUsers().then(results => {\n      // console.log(results.data.results);\n      setDeveloperState({\n        ...developerState,\n        users: results.data.results,\n        filteredUsers: results.data.results\n      });\n    });\n  }, []);\n\n  return (\n    <>\n      <Nav handleSearchChange={handleSearchChange}/>\n      <div className=\"data-area\">\n        {developerState.filteredUsers.length > 0 ? <DataTable developerState = {developerState} handleSort={handleSort}/> : <div></div>}\n      </div>\n    </>\n  );\n};\n\nexport default DataArea;","import React from \"react\";\n\nconst DataAreaContext = React.createContext({\n\n});\n\nexport default DataAreaContext;\n\n","import React from \"react\";\nimport DataArea from \"./DataArea\";\n\n\nfunction Main () {\n    return (\n      <>\n        <DataArea />\n      </>\n    );\n  };\n\nexport default Main;","import React from 'react';\nimport \"../styles/Wrapper.css\";\n\nfunction Wrapper({ children }) {\n  return (\n      <div className=\"wrapper\">\n        { children }\n      </div>\n  );\n}\n\nexport default Wrapper;","import React from 'react';\nimport \"../styles/Header.css\";\n\nfunction Header () {\n    return (\n      <div className=\"header\">\n        <h1>Employee Directory</h1>\n        <p>Click on a heading to filter employees or enter a name in the search box.</p>\n      </div>\n    )\n  }\n\nexport default Header;\n","import React from \"react\";\nimport Main from \"./components/Main\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wrapper>\n        <Header />\n        <Main />\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}